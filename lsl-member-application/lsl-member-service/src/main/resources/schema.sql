-- Create a read-only (select) user to view database state in running application.
DROP USER IF EXISTS guest;
CREATE USER guest PASSWORD 'guest';

-- The default schema in H2 is 'PUBLIC'.
GRANT SELECT ON SCHEMA PUBLIC TO guest;


DROP SEQUENCE IF EXISTS MEMBER_ID_SEQUENCE;
CREATE SEQUENCE MEMBER_ID_SEQUENCE
    START WITH 111100
    INCREMENT BY 100;

DROP TABLE IF EXISTS PROGRAM CASCADE;
CREATE TABLE PROGRAM
(
    PROGRAM_ID          VARCHAR(8)   NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY CHECK REGEXP_LIKE(PROGRAM_ID, '^[A-Z_-]{2,8}$'),
    PROGRAM_NAME        VARCHAR(20)  NOT NULL COMMENT 'A unique name of the program' UNIQUE CHECK REGEXP_LIKE(PROGRAM_NAME, '^[0-9a-zA-Z -]{2,20}$'),
    PROGRAM_DESCRIPTION VARCHAR(200) NOT NULL COMMENT 'A description describing the program.' CHECK REGEXP_LIKE(PROGRAM_DESCRIPTION, '^[0-9a-zA-Z '',.-]{2,200}$')
);
COMMENT ON TABLE PROGRAM IS 'Loyalty Programs that a loyalty member may be enrolled into';
CREATE INDEX PROGRAM_INDEX ON PROGRAM (PROGRAM_NAME);


DROP TABLE IF EXISTS MEMBER CASCADE;
CREATE TABLE MEMBER
(
    MEMBER_ID      IDENTITY    NOT NULL COMMENT 'The loyalty member id.' PRIMARY KEY,
    ACCOUNT_STATUS VARCHAR(10) NOT NULL COMMENT 'The account status of the member' CHECK REGEXP_LIKE(ACCOUNT_STATUS, '^(PENDING|ACTIVE|SUSPENDED)$'),
    GIVEN_NAME     VARCHAR(50) NOT NULL COMMENT 'The member‘s given (first) name',
    SURNAME        VARCHAR(50) NOT NULL COMMENT 'The member‘s surname',
    ENROLLED_SINCE DATE        NOT NULL COMMENT 'The date from which the member has been enrolled in the program.',
    PREFERENCE     VARCHAR(20) NOT NULL COMMENT 'The category of this offer' CHECK REGEXP_LIKE(PREFERENCE, '^(CITY|BEACH|NATURE|SNOW|MOUNTAIN)$')
);
COMMENT ON TABLE MEMBER IS 'Member account information ';

DROP TABLE IF EXISTS MEMBER_PROGRAM CASCADE;
CREATE TABLE MEMBER_PROGRAM
(
    MEMBER_ID  BIGINT     NOT NULL COMMENT 'The loyalty member id.',
    PROGRAM_ID VARCHAR(8) NOT NULL COMMENT 'The loyalty program id.',
    CONSTRAINT PK_MEMBER_PROGRAM PRIMARY KEY (MEMBER_ID, PROGRAM_ID)
);
COMMENT ON TABLE MEMBER_PROGRAM IS 'Member program relationship.';

DROP TABLE IF EXISTS COUNTRY CASCADE;
CREATE TABLE COUNTRY
(
    COUNTRY_ID      IDENTITY    NOT NULL COMMENT 'The country id.' PRIMARY KEY,
    COUNTRY_CODE_1  VARCHAR(2) NOT NULL COMMENT 'The country‘s Alpha-2 code',
    COUNTRY_CODE_2  VARCHAR(3) NOT NULL COMMENT 'The country‘s Alpha-3 code',
    COUNTRY_NAME    VARCHAR(100) NOT NULL COMMENT 'The country‘s name' UNIQUE CHECK REGEXP_LIKE(COUNTRY_NAME, '^[0-9a-zA-Z -]{2,50}$')
);
COMMENT ON TABLE COUNTRY IS 'Country information.';
CREATE INDEX COUNTRY_INDEX ON COUNTRY (COUNTRY_NAME);

DROP TABLE IF EXISTS ADDRESS CASCADE;
CREATE TABLE ADDRESS
(
    ADDRESS_ID      IDENTITY     NOT NULL COMMENT 'The address id.' PRIMARY KEY,
    ADDRESS_1        VARCHAR(200) NOT NULL COMMENT 'The address line 1' CHECK REGEXP_LIKE(ADDRESS_1, '^[0-9a-zA-Z ,.-/]{2,200}$'),
    ADDRESS_2        VARCHAR(200) NULL COMMENT 'The address line 2' CHECK REGEXP_LIKE(ADDRESS_2, '^[0-9a-zA-Z ,.-/]{2,200}$'),
    CITY            VARCHAR(50)  NULL COMMENT 'The address‘s city' CHECK REGEXP_LIKE(CITY, '^[0-9a-zA-Z ,.-/]{2,50}$'),
    POSTCODE        VARCHAR(50)  NULL COMMENT 'The city‘s postcode' CHECK REGEXP_LIKE(POSTCODE, '^[0-9a-zA-Z ,.-]{2,50}$'),
    STATE           VARCHAR(50)  NULL COMMENT 'The address‘s state/province/county' CHECK REGEXP_LIKE(STATE, '^[0-9a-zA-Z ,.-/]{2,50}$'),
    COUNTRY_ID      BIGINT       NULL COMMENT 'The address‘s country id'
);
COMMENT ON TABLE ADDRESS IS 'Address information.';
CREATE INDEX MEMBER_ADDRESS_ADDRESS1_INDEX ON ADDRESS (ADDRESS_1, ADDRESS_2);
CREATE INDEX MEMBER_ADDRESS_CITY_INDEX ON ADDRESS (CITY);
CREATE INDEX MEMBER_ADDRESS_STATE_INDEX ON ADDRESS (STATE);
CREATE INDEX MEMBER_ADDRESS_POSTCODE_INDEX ON ADDRESS (POSTCODE);
CREATE INDEX MEMBER_ADDRESS_COUNTRY_IDE_INDEX ON ADDRESS (COUNTRY_ID);

DROP TABLE IF EXISTS MEMBER_ADDRESS CASCADE;
CREATE TABLE MEMBER_ADDRESS
(
    MEMBER_ID  BIGINT NOT NULL COMMENT 'The loyalty member id.',
    ADDRESS_ID BIGINT NOT NULL COMMENT 'The address id.',
    ADDRESS_CATEGORY VARCHAR(20) NOT NULL COMMENT 'The address is primary address or not' CHECK REGEXP_LIKE(ADDRESS_CATEGORY, '^(POSTAL|RESIDENTIAL)$')
);
COMMENT ON TABLE MEMBER_ADDRESS IS 'Member address relationship.';
CREATE INDEX MEMBER_ADDRESS_MEMBER_INDEX ON MEMBER_ADDRESS (MEMBER_ID);
CREATE INDEX MEMBER_ADDRESS_ADDRESS_INDEX ON MEMBER_ADDRESS (ADDRESS_ID);
CREATE INDEX MEMBER_ADDRESS_CATEGORY_INDEX ON MEMBER_ADDRESS (ADDRESS_CATEGORY);
